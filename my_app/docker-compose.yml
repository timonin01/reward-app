networks:
  tim-network:
    driver: bridge

services:
  redis:
    networks: [ tim-network ]
    container_name: reward-redis
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    command: redis-server --requirepass SecurePass123 --appendonly yes

  reward-calculation-db:
    networks: [tim-network]
    container_name: reward-calculation-db
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: Lalka123
      MYSQL_DATABASE: reward_calculation_db
    ports:
      - "3000:3306"
    volumes:
      - mysql_calc_data:/var/lib/mysql
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -pLalka123 || exit 1" ]
      interval: 5s      # How often to perform the health check (e.g., every 10 seconds)
      timeout: 1s        # Maximum time to wait for the health check to respond
      retries: 100         # Number of retries before marking the container as unhealthy
      start_period: 10s  # Initial delay before starting health checks (useful for slow-starting services)

  reward-payment-db:
    networks: [tim-network]
    container_name: reward-payment-db
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: Lalka123
      MYSQL_DATABASE: reward_payment_db
    ports:
      - "3001:3306"
    volumes:
      - mysql_payment_data:/var/lib/mysql
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -pLalka123 || exit 1" ]
      interval: 5s      # How often to perform the health check (e.g., every 10 seconds)
      timeout: 1s        # Maximum time to wait for the health check to respond
      retries: 100         # Number of retries before marking the container as unhealthy
      start_period: 10s  # Initial delay before starting health checks (useful for slow-starting services)

  reward-calculation-app-instance-1:
    networks: [tim-network]
    container_name: reward-calculation-app-instance-1
    image: reward-calculation-app:1.0.2
    #ports:
    #  - "8080:8080"
    depends_on:
      reward-calculation-db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://reward-calculation-app-instance-1:8080/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 100

  reward-calculation-app-instance-2:
    networks: [tim-network]
    container_name: reward-calculation-app-instance-2
    image: reward-calculation-app:1.0.2
    #ports:
    #  - "8080:8080"
    depends_on:
      reward-calculation-db:
        condition: service_healthy
      reward-calculation-app-instance-1:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://reward-calculation-app-instance-2:8080/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 100

  reward-payment-app-instance-1:
    networks: [tim-network]
    container_name: reward-payment-app-instance-1
    image: reward-payment-app:1.0.2
    #ports:
    #  - "8090:8090"
    depends_on:
      reward-payment-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://reward-payment-app-instance-1:8090/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 100

  reward-payment-app-instance-2:
    networks: [tim-network]
    container_name: reward-payment-app-instance-2
    image: reward-payment-app:1.0.2
    #ports:
    #  - "8090:8090"
    depends_on:
      reward-payment-db:
        condition: service_healthy
      reward-payment-app-instance-1:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://reward-payment-app-instance-2:8090/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 100

  reward-calculation-lb:
    networks: [tim-network]
    image: nginx:latest
    container_name: reward-calculation-lb
    ports:
      - "8080:8080" # Балансировщик будет слушать порт 8080
    volumes:
      - ./reward-calculation-nginx.conf:/etc/nginx/nginx.conf:ro # Передаем конфиг NGINX внутрь контейнера
    depends_on:
      reward-calculation-app-instance-1:
        condition: service_healthy
      reward-calculation-app-instance-2:
        condition: service_healthy

  reward-payment-lb:
    networks: [tim-network]
    image: nginx:latest
    container_name: reward-payment-lb
    ports:
      - "8090:8090" # Балансировщик будет слушать порт 8090
    volumes:
      - ./reward-payment-nginx.conf:/etc/nginx/nginx.conf:ro # Передаем конфиг NGINX внутрь контейнера
    depends_on:
      reward-payment-app-instance-1:
        condition: service_healthy
      reward-payment-app-instance-2:
        condition: service_healthy

  prometheus:
    networks: [tim-network]
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      reward-calculation-app-instance-1:
        condition: service_healthy
      reward-calculation-app-instance-2:
        condition: service_healthy
      reward-payment-app-instance-1:
        condition: service_healthy
      reward-payment-app-instance-2:
        condition: service_healthy


volumes:
  redis_data:
  mysql_calc_data:
  mysql_payment_data: